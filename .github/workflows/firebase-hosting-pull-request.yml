name: Deploy PR to Firebase Release Channel

on:
  pull_request:
    branches:
      - staging
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18
    - run: yarn install
    - run: yarn build


    - name: Build and deploy to Firebase Release Channel
      id: deploy
      uses: w9jds/firebase-action@master
      with:
        args: deploy --only functions,hosting --project kaiju-dex --channel pr-${{ github.event.number }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KAIJU_DEX }}

    - name: Get release channel URL
      id: get-url
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KAIJU_DEX }}
      run: |
        PR_NUMBER=${{ github.event.number }}
        PROJECT_ID=kaiju-dex
        CHANNEL_NAME="pr-$PR_NUMBER"
        RESPONSE=$(curl -s -X GET \
          "https://firebasehosting.googleapis.com/v1beta1/projects/$PROJECT_ID/sites/$PROJECT_ID/channels/$CHANNEL_NAME/releases" \
          -H "Authorization: Bearer $FIREBASE_TOKEN" \
          -H "Content-Type: application/json")
        RELEASE_URL=$(echo $RESPONSE | jq -r '.releases[0].version.config.url')
        echo "::set-output name=url::$RELEASE_URL"

    - name: Add comment to PR
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.number }};
          const releaseUrl = '${{ steps.get-url.outputs.url }}';
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: `ðŸš€ Deployment to release channel successful!\n\nPreview URL: [${releaseUrl}](${releaseUrl})`
          });
